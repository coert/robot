
Inhoud

 - Werken met Eclipse
 - De huidige structuur van de robot
 - Zelf bots schrijven
 - Processing aan de praat krijgen
 
 == Werken met Eclipse ==

Jars toevoegen
1. RMB op lib/*.jar -> Build Path -> Add To BuildPath

JPL native library
1. RMB op Referenced Libraries/jpl.jar -> Properties -> Native Library
2. (Linux) Voeg een pad in gelijkend aan /usr/lib/swi-prolog/lib/i386
2. (Mac?) Voeg een pad in gelijkend aan /opt/local/lib/swipl-5.10.4/lib/i386-darwin10.7.0
2. (Voor Windows:) voeg <Program Files>\pl\bin toe aan je PATH, reboot

Quicktime
Mac: Run -> Run Configurations -> Arguments -> VM Arguments veld: -d32
Win: QTJNative.zip toevoegen aan project build path (niet alleen JRE System Library) en Native Library op <Program Files>\Quicktime\QTSystem

Winvdig installeren als je webcam niet wordt gevonden: http://www.eden.net.nz/7/20071008/WinVDIG_101.exe

OpenCV
Download en installeer OpenCV 1.0 (klik linksboven op home > opencv win > 1.0) van http://ubaa.net/shared/processing/opencv/ en volg de handleiding.
unzip opencv_01 en zet OpenCV in processing > modes > java > libraries 
RMB op openCV.jar: native library zetten naar processing > modes > java > libraries > OpenCV > lib > opencv.dll



== De huidige structuur van de robot ==

Er zijn een aantal clients (in de map mennov1), dit zijn manieren om met de robot te praten. Op het moment zijn dit allemaal nog aparte instanties van de robot.

Om te testen kun je bijvoorbeeld de TerminalClient runnen. Deze start de robot op.

Vervolgens kun je "bots" inladen. Deze bots vind je in de map "bots" (surprise!). 
Stel bijvoorbeeld dat je hoger lager wil spelen, dan zeg je eerst in de terminal (in het geval van de TerminalClient):
	Load Hogerlager
Vervolgens gaat Menno (Zie mennov1/MennoV1.java) het bestand Hogerlager.java zoeken en die klasse inladen.

Vanaf dat moment krijgt Hogerlager alle berichten die je (in dit geval) in de terminal zegt.
Zeg je nu "Zullen we hoger lager spelen?", dan reageert de bot hierop. 
De interface van bots zoals Hogerlager is te vinden in Bot.java. 

== Zelf een bot schrijven ==

Een bot is een klasse in de package bot, die de interface Bot implementeert.
De vereiste methoden zijn:

 - ask
   Deze methode wordt aangeroepen wanneer de gebruiker praat met Menno (via IRC, de terminal, whatever...). Wat jij,
   als botschrijver, moet doen, is iets leuks met de input die je krijgt (de string die de gebruiker heeft gegeven,
   en de naam waarmee de gebruiker bij die interface bekend is). Als je er iets mee wil doen en dat aan de gebruiker
   wil laten weten, return je een string. Deze wordt dan doorgegeven aan de gebruiker. Als je niets wil doen, of gewoon
   niets te melden hebt aan de gebruiker, return dan null.

Dat was het!
   
== Processing aan de praat krijgen ==

MAAK VAN TEST EEN SOURCEFOLDER!!!1!

Om dit te doen: RMB op de projectmap, Properties. Klik links op Java Build Path, vervolgens kun je onder het tabblad
Source folders de map test toevoegen.

== Git ==
hier komt kort een "hoe git te gebruiken" handleiding. meeste vanaf gitref.org
ga in git bash naar de hoofdmap van het project met cd.
git add [FILENAME]
	als je een bestand wilt committen, moet je deze eerst adden.

git status 
	dit commando geeft een overzicht van de files die verschillen tussen jouw systeem en de master, m.a.w. aanpassingen die je nog niet gecommit hebt. Daarnaast kan je hier ook zien welke bestanden je geadd hebt.
git status -s
	dito, maar dan short

git pull
	hiermee haal je de nieuwste bestanden van de repository (de opgeslagen versie op github.com) binnen, en wordt deze gemerged met jouw files. mergen is samenvoegen met behoudt van zoveel mogelijk verschillen. magie?
	doe dit altijd voordat je pusht.

git commit -m "INFORMATIE OVER COMMIT"
	hiermee maak je van al je adds een pakketje, die je in een keer kan pushen. ook voeg je informatie over de aanpassingen toe.

git push
	hiermee push je jouw commit naar de repository
	


Event Action Model

De robot bestaat nu uit 3 lagen:
1- Event-genererende onderdelen: Clients
2- Event-routende onderdelen: Bothandler
3- Event-accepterende onderdelen: Bots

1- De Clients generenen events, bvb: de IRC-client genereert textInputEvent
3- De bots krijgen events, en kunnen daar dan allemaal spannende dingen mee doen.

2- De Bothandler krijgt de events van 1, en zorgt dat deze bij de juiste 3 aankomen. Om dit te doen moet hij weten welke bot welke events van welke gebruiker wil ontvangen. Om dit te bewerkstelliggen moet elke bot een hashmap bijhouden met als keys de verschillende events, en als value een datastructuur (hashmap? list? linked list?) die Users bijhoudt waarvoor die bot event van dit type wil ontvangen.

Er is een abstracte bot-klasse met de methode addEventUser(EnumEventType t, String user) die deze hasmap aanpast. Hasmap aanmaken/doorgeven aan Bothandler op moment van inladen.

Bothandler heeft als object een tweedimensionale hashmap met datastructuur x erin (hashmap van hashmaps van datastructuur x). Bij het inladen van een bot wordt er gekeken welke events die bot mogelijk zou kunnen ontvangen (voor het opstarten van webcam ed?), en er wordt een laad-methode aangeroepen (onLoad) welke de hashmap initialiseerd en teruggeeft.

Het doel van dit model is inter-process communication te implementeren, dwz dat een bot als respons op een textInputEvent ook andere events kan genereren, bijvoorbeeld antwoord-events maar ook move-events.

Om dit alles simpel te houden voor de leken is er een methode nodig die deze hashtable van datastructuur X automatisch aanmaakt, een methode onLoad (in tegestelling tot de constructor zal onLoad de hashmap returnen, tevens blijft de constructor dan vrij voor andere taken).
Om dit eenvoudig te bewerkstelligen stellen wij, Richard en Rick, voor om een abstracte bot-klasse te schrijven. Deze klasse zit net onder de bot-interface en alle bots breiden deze klasse uit. In deze klasse wordt de methode onLoad gedefinieerd.
Het blijft aan de gebruiker om per event-type per user in te stellen of deze bot events van dit type van deze gebruiker wil ontvangen. Wij menen dat we dit van coders kunnen verwachten omdat het nieuwe message-systeem cruciaal wordt aan de robot, en het sowieso nodig is om hier begrip van te hebben voor elke bot boven het niveau Echobot.
Het ontvangen van een event-type voor alle users willen we representeren door de Datastructuur X voor dat eventtype null te laten.

Ben ik nog iets vergeten?